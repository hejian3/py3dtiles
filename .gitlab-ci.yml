stages:
  - üêç lint
  - ü§û test
  - üöÄ deploy

# -- LINT JOBS --------------------------------------------------------------------------
flake8:
  stage: üêç lint
  image:
    name: python:3.10-slim
  before_script:
    - python -m pip install -U flake8
  script:
    - flake8 setup.py py3dtiles/ docs/ tests/
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"

# -- TEST JOBS --------------------------------------------------------------------------
test:
  stage: ü§û test
  image:
    name: python:$PYTHON_VERSION-slim
  before_script:
    - apt update
    - apt install -y pdal llvm
  script:
    - pip install .
    - pip install .[dev]
    - which pytest
    - pytest
    # TODO move that in unit tests
    - py3dtiles info tests/pointCloudRGB.pnts
  artifacts:
    when: always
    paths:
      - coverage.xml
      - junit/test-results.xml
    reports:
      junit: junit/test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.7', '3.8', '3.9', '3.10']

3d-tiles-validator:
  stage: ü§û test
  image:
    name: node:18
  before_script:
    - apt update
    - apt install -y python3-pip pdal llvm
    - pip install .
    - git clone --depth 1 https://github.com/CesiumGS/3d-tiles-validator
    - cd 3d-tiles-validator
    - npm install
  script:
    - py3dtiles convert ../tests/fixtures/with_srs.las
    - npx ts-node src/main.ts --tilesetFile 3dtiles/tileset.json | tee validator-output.txt
    - grep \"numErrors\"\:\ 0 validator-output.txt
    - grep \"numWarnings\"\:\ 0 validator-output.txt
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"

sonarcloud-check:
  stage: ü§û test
  needs: [test]
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"

# -- DEPLOY JOBS -------------------------------------------------------------------------
pages:
  stage: üöÄ deploy
  image: python:3.10-slim
  before_script:
    - apt update && apt install -y git
  script:
    - pip install .
    - pip install .[doc]
    # sphinx-multiversion needs to have all the branches
    - git fetch
    - sphinx-multiversion docs public
    - cp -rv docs/index_redirect.html public/index.html
    - current_version="$(git tag --list | tail -n1)"
    - sed -i "s/VERSION/$current_version/g" public/index.html
  artifacts:
    paths:
      - public
  only:
    - master
    - tags
